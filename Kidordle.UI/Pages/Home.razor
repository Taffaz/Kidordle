@page "/"
@using Kidordle.UI.Pages.Input
@using KidordleGame
@using MudBlazor
@inject Game _game
@implements IDisposable

<div class="main-game">
    <div class="top">
        <MudGrid Spacing="1" Justify="Justify.Center">
            <div class="game-grid">
                @if (_game.IsLose)
                {
                    <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Elevation="24" NoIcon="true" ContentAlignment="HorizontalAlignment.Center" Style="max-width: 480px;">
                        THE WORD WAS: @_game.Answer.ToUpper()
                    </MudAlert>
                    <br />
                }
                @foreach (var guessResult in _game.Results)
                {
                    <MudItem Class="d-flex justify-center">
                        <div class="letter-box-row">
                            @for (int x = 0; x < _game.Answer.Length; x++)
                            {
                                <LetterBox Letter="guessResult.Guess[x]" LetterResult="guessResult.LetterResult[x]" />
                            }
                        </div>
                    </MudItem>
                }
                @if (_game.IsWin)
                {
                    <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Elevation="24" NoIcon="true" ContentAlignment="HorizontalAlignment.Center" Style="max-width: 480px;">Congratuations!</MudAlert>
                }
                else if (!_game.IsLose)
                {
                    <MudItem Class="d-flex justify-center">
                        <div class="letter-box-row">
                            @for (var i = 0; i < _game.Answer.Length; i += 1)
                            {
                                var idx = i;
                                <InputLetterBox Letter="_game.GetInputAt(idx)" />
                            }
                        </div>
                    </MudItem>

                    @for (var i = _game.Results.Count; i < _game.MaxGuesses - 1; i++)
                    {
                        <MudItem Class="d-flex justify-center">
                            <div class="letter-box-row">
                                @for (var x = 0; x < _game.Answer.Length; x++)
                                {
                                    <LetterBox Letter="_game.BlankChar" LetterResult="0" />
                                }
                            </div>
                        </MudItem>
                    }
                }
            </div>
        </MudGrid>
    </div>
    <br />
    <div class="input-row">
        <Keyboard />
    </div>
</div>

@code {
    public void Dispose()
    {
        _game.GameUpdated -= OnGameUpdated;
        _game.InputChanged -= OnInputChanged;
    }
    protected override Task OnInitializedAsync()
    {
        _game.GameUpdated += OnGameUpdated;
        _game.InputChanged += OnInputChanged;

        return Task.FromResult(0);

    }

    private void OnInputChanged() { InvokeAsync(StateHasChanged); }
    private void OnGameUpdated() { InvokeAsync(StateHasChanged); }

}